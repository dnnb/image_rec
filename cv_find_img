#!/usr/bin/env python
# -*- coding:utf-8 -*-
from __future__ import print_function
from __future__ import unicode_literals

import sys

from PIL import ImageGrab
import numpy as np
import cv2
import pyautogui

cv2.namedWindow("img", 0)


def find_image_cv(source, template):
	is_discern = 0
	match_result = cv2.matchTemplate(source, template, cv2.TM_CCOEFF_NORMED)
	max_loc = cv2.minMaxLoc(match_result)
	pos_start = max_loc[3]
	
	x = int(pos_start[0]) + int(template.shape[1] / 2)
	y = int(pos_start[1]) + int(template.shape[0] / 2)
	similarity = max_loc[1]
	min_val, max_val, min_loc, max_loc = max_loc
	h, w = template.shape[:2]
	
	if similarity > 0.8:  # 识别到了
		is_discern = 1
	
	left_top = max_loc  # 左上角
	
	return {
		'state': is_discern,
		'left_top': left_top,
		'right_low': (left_top[0] + w, left_top[1] + h),
		'center': (x, y),
		'accuracy': similarity
	}


my_img = '2.png'
my_template = cv2.imread(my_img)  # 读取模板
my_template = cv2.cvtColor(my_template, cv2.COLOR_BGR2GRAY)  # 转为灰度图像


def click(location):

	pyautogui.moveTo(location[0], location[1])
	pyautogui.click()


while True:
	img = ImageGrab.grab()
	
	# 显示图片
	img_np = np.array(img)
	img_np = cv2.cvtColor(img_np, cv2.COLOR_BGR2GRAY)
	result = find_image_cv(img_np, my_template)
	if result['state']:
		cv2.rectangle(img_np, result['left_top'], result['right_low'], 255, 2)  # 画出矩形位置
		click(result['center'])
	cv2.imshow('img', img_np)
	k = cv2.waitKey(100)
	
	if k == 27:  # 键盘上Esc键的键值
		cv2.destroyAllWindows()
		sys.exit(0)

